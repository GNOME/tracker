/* tracker-sparql-query.vapi generated by valac 0.40.8, do not modify. */

[CCode (cprefix = "Tracker", gir_namespace = "Tracker", gir_version = "2.0", lower_case_cprefix = "tracker_")]
namespace Tracker {
	[CCode (cheader_filename = "tracker-sparql-query.h")]
	public class SparqlScanner : GLib.Object {
		public SparqlScanner (char* input, size_t len);
		public Tracker.SparqlTokenType read_token (out Tracker.SourceLocation token_begin, out Tracker.SourceLocation token_end) throws Tracker.Sparql.Error;
		public void seek (Tracker.SourceLocation location);
	}
	[CCode (cheader_filename = "tracker-sparql-query.h")]
	public class TurtleReader : GLib.Object {
		public TurtleReader (GLib.File file) throws GLib.Error, GLib.FileError;
		public static void load (GLib.File file, Tracker.Data.Update data) throws GLib.Error, GLib.FileError, Tracker.Sparql.Error, Tracker.DateError, Tracker.DBInterfaceError;
		public bool next () throws Tracker.Sparql.Error;
		[CCode (cname = "uuid_generate")]
		public static void uuid_generate ([CCode (array_length = false)] uchar[] uuid);
		public string graph { get; private set; }
		public string object { get; private set; }
		public bool object_is_uri { get; private set; }
		public string predicate { get; private set; }
		public string subject { get; private set; }
	}
	[CCode (cheader_filename = "tracker-sparql-query.h")]
	public struct SourceLocation {
		public char* pos;
		public int line;
		public int column;
		public SourceLocation (char* pos, int line, int column);
	}
	[CCode (cheader_filename = "tracker-sparql-query.h")]
	public enum SparqlTokenType {
		NONE,
		A,
		ABS,
		AS,
		ASC,
		ASK,
		ATBASE,
		ATPREFIX,
		AVG,
		BASE,
		BLANK_NODE,
		BIND,
		BOUND,
		BY,
		CEIL,
		CLOSE_BRACE,
		CLOSE_BRACKET,
		CLOSE_PARENS,
		COALESCE,
		COLON,
		CONCAT,
		CONTAINS,
		COMMA,
		CONSTRUCT,
		COUNT,
		DATA,
		DATATYPE,
		DAY,
		DECIMAL,
		DELETE,
		DESC,
		DESCRIBE,
		DISTINCT,
		DIV,
		DOT,
		DOUBLE,
		DOUBLE_CIRCUMFLEX,
		DROP,
		ENCODE_FOR_URI,
		EOF,
		EXISTS,
		FALSE,
		FILTER,
		FLOOR,
		FROM,
		GRAPH,
		GROUP,
		GROUP_CONCAT,
		HAVING,
		HOURS,
		IF,
		INSERT,
		INTEGER,
		INTO,
		IRI_REF,
		ISBLANK,
		ISIRI,
		ISLITERAL,
		ISURI,
		LANG,
		LANGMATCHES,
		LCASE,
		LIMIT,
		MAX,
		MD5,
		MIN,
		MINUS,
		MINUTES,
		MONTH,
		NAMED,
		NOT,
		NOW,
		NULL,
		OFFSET,
		OP_AND,
		OP_EQ,
		OP_GE,
		OP_GT,
		OP_LE,
		OP_LT,
		OP_NE,
		OP_NEG,
		OP_OR,
		OP_IN,
		OPEN_BRACE,
		OPEN_BRACKET,
		OPEN_PARENS,
		OPTIONAL,
		OR,
		ORDER,
		PLUS,
		PN_PREFIX,
		PREFIX,
		RAND,
		REDUCED,
		REGEX,
		REPLACE,
		ROUND,
		SAMETERM,
		SECONDS,
		SELECT,
		SEMICOLON,
		SHA1,
		SHA256,
		SHA512,
		SILENT,
		STAR,
		STR,
		STRAFTER,
		STRBEFORE,
		STRENDS,
		STRING_LITERAL1,
		STRING_LITERAL2,
		STRING_LITERAL_LONG1,
		STRING_LITERAL_LONG2,
		STRLEN,
		STRSTARTS,
		SUBSTR,
		SUM,
		TRUE,
		UCASE,
		UNION,
		VAR,
		WHERE,
		WITH,
		YEAR;
		public unowned string to_string ();
	}
}
